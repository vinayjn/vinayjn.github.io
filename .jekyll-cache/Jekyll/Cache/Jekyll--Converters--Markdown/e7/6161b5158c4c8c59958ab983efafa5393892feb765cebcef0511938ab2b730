I"(<p><a href="">Objective C</a> inherits the capabilities and features of <a href="">C</a> so you can write C like <a href="">directives</a> or preprocessors and the Objective C compiler(<a href="">LLVM</a>) won’t complain.</p>

<p>#define is one such preprocessor which asks the compiler to replace the occurrence of a particular set of characters with another set of characters before compiling the source file. #define is also a great way of defining constants</p>

<pre class="splash"><code>#define <span class="type">REPLACE_ME</span> <span class="keyword">@"With</span> <span class="type">This</span> <span class="string">String"</span>
</code></pre>

<p>This is a simple Macro, just by looking at it you can understand what it does. At compile time every occurrence of <code class="language-plaintext highlighter-rouge">REPLACE_ME</code> will be replaced by <code class="language-plaintext highlighter-rouge">With This String</code>.</p>

<p>After the introduction of Swift Programming Language app developers started porting their apps to Swift’s modern syntax. The above macro can be easily ported to Swift with the <code class="language-plaintext highlighter-rouge">let</code> keyword.</p>

<pre class="splash"><code><span class="keyword">let</span> <span class="type">REPLACE_ME</span> = <span class="string">"With This String"</span>
</code></pre>

<p>The new syntax : its clean, its short and it isn’t scary. The code porting was easy. However, if you have worked on an app with thousands of source files(yes, .m files) then you may be used to see these type of complex macros.</p>

<pre class="splash"><code>#define <span class="type">DISPATCH_BACKGROUND_QUEUE</span>(name,function) dispatch_queue_t backgroundQueue = <span class="call">dispatch_queue_create</span>(name, <span class="number">0</span>); <span class="call">dispatch_async</span>(backgroundQueue, ^{function});

#define <span class="type">DISPATCH_MAIN_QUEUE</span>(function) <span class="call">dispatch_async</span>(<span class="call">dispatch_get_main_queue</span>(), ^{function});
</code></pre>

<p>If you have seen macros like these and you are going to port these to Swift then read further.</p>

<p>Lets see this code in action. I am considering the background queue.</p>

<pre class="splash"><code><span class="type">DISPATCH_BACKGROUND_QUEUE</span>(<span class="string">"BackgroundQueue"</span>,

		<span class="comment">// Do some background stuff like file / database read write
		// Do some thing else
		// May be print some logs to debug</span>
	)
</code></pre>

<p>The code block above is a simpler way of writing this :</p>

<pre class="splash"><code>dispatch_queue_t backgroundQueue = <span class="call">dispatch_queue_create</span>(name, <span class="number">0</span>);
<span class="call">dispatch_async</span>(backgroundQueue, ^{

		<span class="comment">// Do some background stuff like file / database read write
		// Do some thing else
		// May be print some logs to debug</span>
	});
</code></pre>

<p>Just to keep you in sync, this block of code executes the code between <code class="language-plaintext highlighter-rouge">^{ }</code> in a background thread without blocking the main thread. You can read more about it by referring to <a href="">Grand Central Dispatch</a>.</p>

<h3 id="porting-complex-objective-c-macros-to-swift-constants">Porting Complex Objective C macros to Swift Constants</h3>

<p>If you are new to Swift and not comfortable in writing closures I would highly recommend the following references on Swift Closures</p>

<ul>
  <li><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html">Swift Closures - Apple Docs</a></li>
  <li><a href="http://fuckingclosuresyntax.com/">How Do I Declare a Closure in Swift?</a></li>
  <li><a href="http://fuckingswiftblocksyntax.com/">Swift closures and functions</a></li>
</ul>

<p>If you have gone through the following referrence I can expect you knowing that the complex macro in Objective C can be ported to Swift with the help of functions. I will try to make it as simple as I can by porting it word by word.</p>

<pre class="splash"><code>#define <span class="type">DISPATCH_BACKGROUND_QUEUE</span>(name,function) dispatch_queue_t backgroundQueue = <span class="call">dispatch_queue_create</span>(name, <span class="number">0</span>); 																				<span class="call">dispatch_async</span>(backgroundQueue, ^{function});
</code></pre>

<p>The macro accepts two parameters one is a string and another is a code block. In Swift we can easily pass a block of code to another function with the help of Closures.</p>

<p><strong>ObjC :</strong></p>

<pre class="splash"><code>#define <span class="type">DISPATCH_BACKGROUND_QUEUE</span>(name,function)
</code></pre>

<p><strong>Swift :</strong></p>

<pre class="splash"><code><span class="keyword">func</span> DISPATCH_BACKGROUND_QUEUE(queueName : <span class="type">String</span>, codeBlock:()-&gt;())
</code></pre>

<p>A Swift function with two parameters, as simple as that.</p>

<p><strong>ObjC :</strong></p>

<pre class="splash"><code>#define <span class="type">DISPATCH_BACKGROUND_QUEUE</span>(name,function) dispatch_queue_t backgroundQueue = <span class="call">dispatch_queue_create</span>(name, <span class="number">0</span>); 																	<span class="call">dispatch_async</span>(backgroundQueue, ^{function});
</code></pre>

<p><strong>Swift :</strong></p>
<pre class="splash"><code><span class="keyword">func</span> BGQueue(codeBlock:()-&gt;(), queueName : <span class="type">String</span>){
    <span class="keyword">let</span> queue = <span class="call">dispatch_queue_create</span>(queueName, <span class="keyword">nil</span>)
    <span class="call">dispatch_async</span>(queue) { () -&gt; <span class="type">Void</span> <span class="keyword">in</span>
        <span class="call">codeBlock</span>()
    }
}
</code></pre>
:ET