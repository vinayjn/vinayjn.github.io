I"œ<p>One of the behaviors of iOS devices which I see as a limitation is that the default keyboard hides the views behind it. Hence the user cannot interact with the UIViews and Controls behind the keyboard. I found a great answer on <a href="http://stackoverflow.com/a/26561723/2286267">StackOverflow</a> to solve this problem. However the code used in this answer moves every textField by the same amount. So even if you are editing a textField which does not get hidden behind the textField will still move up and may disappear out of the device screen upwards.</p>

<p>My solution to the problem is a small modification to the answer on <code class="language-plaintext highlighter-rouge">SO</code>. Here I am sending an offset by which the textField has to be moved up and down with keyboard show/hide respectively. See the demo to better understand this.</p>
<center>
<iframe width="320" height="590" src="https://www.youtube.com/embed/ADLdPehMUYc" frameborder="0" allowfullscreen=""></iframe>
</center>

<p><strong>Objective C Code</strong></p>

<pre class="splash"><code>-(void)textFieldDidBeginEditing:(<span class="type">UITextField</span> *)textField{

    [<span class="keyword">self</span> animateTextField:textField up:<span class="type">YES</span> withOffset:textField.<span class="property">frame</span>.<span class="property">origin</span>.<span class="property">y</span> / <span class="number">2</span>];
}

-(void)textFieldDidEndEditing:(<span class="type">UITextField</span> *)textField{

    [<span class="keyword">self</span> animateTextField:textField up:<span class="type">NO</span> withOffset:textField.<span class="property">frame</span>.<span class="property">origin</span>.<span class="property">y</span> / <span class="number">2</span>];

}
-(<span class="type">BOOL</span>)textFieldShouldReturn:(<span class="type">UITextField</span> *)textField{

    [textField resignFirstResponder];
    <span class="keyword">return true</span>;
}

-(void)animateTextField:(<span class="type">UITextField</span>*)textField up:(<span class="type">BOOL</span>)up withOffset:(<span class="type">CGFloat</span>)<span class="call">offset</span>
{
    const int movementDistance = -offset;
    const float movementDuration = <span class="number">0</span>.4f;
    int movement = (up ? movementDistance : -movementDistance);
    [<span class="type">UIView</span> beginAnimations: <span class="string">@"animateTextField" context: nil];</span>
    [<span class="type">UIView</span> setAnimationBeginsFromCurrentState: <span class="type">YES</span>];
    [<span class="type">UIView</span> setAnimationDuration: movementDuration];
    <span class="keyword">self</span>.<span class="property">view</span>.<span class="property">frame</span> = <span class="type">CGRectOffset</span>(<span class="keyword">self</span>.<span class="property">view</span>.<span class="property">frame</span>, <span class="number">0</span>, movement);
    [<span class="type">UIView</span> commitAnimations];
}
</code></pre>

<p><strong>Swift Code</strong></p>

<pre class="splash"><code><span class="keyword">func</span> animateTextField(textField: <span class="type">UITextField</span>, up: <span class="type">Bool</span>, withOffset offset:<span class="type">CGFloat</span>)
{
    <span class="keyword">let</span> movementDistance : <span class="type">Int</span> = -<span class="type">Int</span>(offset)
    <span class="keyword">let</span> movementDuration : <span class="type">Double</span> = <span class="number">0.4</span>
    <span class="keyword">let</span> movement : <span class="type">Int</span> = (up ? movementDistance : -movementDistance)
    <span class="type">UIView</span>.<span class="call">beginAnimations</span>(<span class="string">"animateTextField"</span>, context: <span class="keyword">nil</span>)
    <span class="type">UIView</span>.<span class="call">setAnimationBeginsFromCurrentState</span>(<span class="keyword">true</span>)
    <span class="type">UIView</span>.<span class="call">setAnimationDuration</span>(movementDuration)
    <span class="keyword">self</span>.<span class="property">view</span>.<span class="property">frame</span> = <span class="type">CGRectOffset</span>(<span class="keyword">self</span>.<span class="property">view</span>.<span class="property">frame</span>, <span class="number">0</span>, <span class="type">CGFloat</span>(movement))
    <span class="type">UIView</span>.<span class="call">commitAnimations</span>()
}

<span class="keyword">func</span> textFieldDidBeginEditing(textField: <span class="type">UITextField</span>)
{
    <span class="keyword">self</span>.<span class="call">animateTextField</span>(textField, up: <span class="keyword">true</span>, withOffset: textField.<span class="property">frame</span>.<span class="property">origin</span>.<span class="property">y</span> / <span class="number">2</span>)
}

<span class="keyword">func</span> textFieldDidEndEditing(textField: <span class="type">UITextField</span>)
{
    <span class="keyword">self</span>.<span class="call">animateTextField</span>(textField, up: <span class="keyword">false</span>, withOffset: textField.<span class="property">frame</span>.<span class="property">origin</span>.<span class="property">y</span> / <span class="number">2</span>)
}

<span class="keyword">func</span> textFieldShouldReturn(textField: <span class="type">UITextField</span>) -&gt; <span class="type">Bool</span>
{
    textField.<span class="call">resignFirstResponder</span>()
    <span class="keyword">return true</span>
}
</code></pre>
:ET