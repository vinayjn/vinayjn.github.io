I"Ó<p>There are several ways tasks can communicate with one another. One of those ways is to use a delegate. A delegate is an object that agrees to undertake certain decisions or tasks for another object, or would like to be notified when certain events occur.</p>

<p>Classes have a delegate outlet. You connect this outlet to the object that‚Äôs going to be its delegate. So that the outlet can send messages to the delegate to perform tasks. Delegates are a popular programming pattern in iOS.</p>

<p>Becoming a delegate is a three-step process:</p>

<ol>
  <li>In your custom class, adopt the delegate‚Äôs protocol.</li>
  <li>Implement the appropriate protocol methods.</li>
  <li>Connect the delegate outlet of the object to your delegate object.</li>
</ol>

<p>A protocol is a contract, or promise, that your class will implement specific methods. This lets other objects know that your object has agreed to accept certain responsibilities. A protocol can declare two kinds of methods: required and optional. All required methods must be included in your class‚Äôs implementation. If you leave any out, you‚Äôve broken the contract, and your project won‚Äôt compile.
It‚Äôs up to you to decide which optional methods you implement. If you implement an optional method, your object will receive that message. If you don‚Äôt, it won‚Äôt. It‚Äôs that simple. Most delegate methods are optional.</p>

<p>Lets take an example of <code class="language-plaintext highlighter-rouge">UIWebView</code> to explain it properly :</p>

<p><strong>Step 1 :</strong> Adopt the delegate‚Äôs protocol. In case of <code class="language-plaintext highlighter-rouge">UIWebView</code>, its <code class="language-plaintext highlighter-rouge">UIWebViewDelegate</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@interface ViewController : UIViewController&lt;UIWebViewDelegate&gt;
</code></pre></div></div>

<p>Adding this to your class definition means that your class agrees to handle messages listed in the <code class="language-plaintext highlighter-rouge">UIWebViewDelegate</code> protocol, and is prepared to be connected to a <code class="language-plaintext highlighter-rouge">UIWebView‚Äôs</code> delegate outlet.</p>

<p>Looking up the <code class="language-plaintext highlighter-rouge">UIWebViewDelegate</code> protocol, you find that it lists four methods, all of which are optional:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (BOOL)webView:(UIWebView *)webViewÙè∞Å shouldStartLoadWithRequest:(NSURLRequest *)requestÙè∞Å navigationType:(UIWebViewNavigationType)navigationType;
- (void)webViewDidStartLoad:(UIWebView *)webView;
- (void)webViewDidFinishLoad:(UIWebView *)webView;
- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error;
</code></pre></div></div>

<p><strong>Step 2 :</strong> Implement methods(any) in the ViewController</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (void)webViewDidStartLoad:(UIWebView *)webView
{
	//some code
}
</code></pre></div></div>

<p><strong>Step 3 :</strong> Connect the delegate outlet of the object to your delegate object. For this example the delegate is the ViewController object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>webViewObj.delegate = self;
</code></pre></div></div>

<p>Now your <code class="language-plaintext highlighter-rouge">ViewController</code> object is the <code class="language-plaintext highlighter-rouge">delegate</code> for the web view. As the web view does its thing, your <code class="language-plaintext highlighter-rouge">delegate</code> receives messages on its progress.</p>
:ET